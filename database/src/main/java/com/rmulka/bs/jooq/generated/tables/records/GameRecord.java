/*
 * This file is generated by jOOQ.
 */
package com.rmulka.bs.jooq.generated.tables.records;


import com.rmulka.bs.jooq.generated.tables.Game;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GameRecord extends UpdatableRecordImpl<GameRecord> implements Record4<UUID, Boolean, JSONB, Integer> {

    private static final long serialVersionUID = 689585137;

    /**
     * Setter for <code>bs.game.id</code>.
     */
    public GameRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>bs.game.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>bs.game.in_progress</code>.
     */
    public GameRecord setInProgress(Boolean value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>bs.game.in_progress</code>.
     */
    public Boolean getInProgress() {
        return (Boolean) get(1);
    }

    /**
     * Setter for <code>bs.game.details</code>.
     */
    public GameRecord setDetails(JSONB value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>bs.game.details</code>.
     */
    public JSONB getDetails() {
        return (JSONB) get(2);
    }

    /**
     * Setter for <code>bs.game.num_players</code>.
     */
    public GameRecord setNumPlayers(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>bs.game.num_players</code>.
     */
    public Integer getNumPlayers() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, Boolean, JSONB, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, Boolean, JSONB, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Game.GAME.ID;
    }

    @Override
    public Field<Boolean> field2() {
        return Game.GAME.IN_PROGRESS;
    }

    @Override
    public Field<JSONB> field3() {
        return Game.GAME.DETAILS;
    }

    @Override
    public Field<Integer> field4() {
        return Game.GAME.NUM_PLAYERS;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public Boolean component2() {
        return getInProgress();
    }

    @Override
    public JSONB component3() {
        return getDetails();
    }

    @Override
    public Integer component4() {
        return getNumPlayers();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public Boolean value2() {
        return getInProgress();
    }

    @Override
    public JSONB value3() {
        return getDetails();
    }

    @Override
    public Integer value4() {
        return getNumPlayers();
    }

    @Override
    public GameRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public GameRecord value2(Boolean value) {
        setInProgress(value);
        return this;
    }

    @Override
    public GameRecord value3(JSONB value) {
        setDetails(value);
        return this;
    }

    @Override
    public GameRecord value4(Integer value) {
        setNumPlayers(value);
        return this;
    }

    @Override
    public GameRecord values(UUID value1, Boolean value2, JSONB value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GameRecord
     */
    public GameRecord() {
        super(Game.GAME);
    }

    /**
     * Create a detached, initialised GameRecord
     */
    public GameRecord(UUID id, Boolean inProgress, JSONB details, Integer numPlayers) {
        super(Game.GAME);

        set(0, id);
        set(1, inProgress);
        set(2, details);
        set(3, numPlayers);
    }
}
