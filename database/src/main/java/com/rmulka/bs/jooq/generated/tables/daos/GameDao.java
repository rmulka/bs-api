/*
 * This file is generated by jOOQ.
 */
package com.rmulka.bs.jooq.generated.tables.daos;


import com.rmulka.bs.jooq.generated.tables.Game;
import com.rmulka.bs.jooq.generated.tables.records.GameRecord;

import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.JSONB;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GameDao extends DAOImpl<GameRecord, com.rmulka.bs.jooq.generated.tables.pojos.Game, UUID> {

    /**
     * Create a new GameDao without any configuration
     */
    public GameDao() {
        super(Game.GAME, com.rmulka.bs.jooq.generated.tables.pojos.Game.class);
    }

    /**
     * Create a new GameDao with an attached configuration
     */
    public GameDao(Configuration configuration) {
        super(Game.GAME, com.rmulka.bs.jooq.generated.tables.pojos.Game.class, configuration);
    }

    @Override
    public UUID getId(com.rmulka.bs.jooq.generated.tables.pojos.Game object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.rmulka.bs.jooq.generated.tables.pojos.Game> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Game.GAME.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.rmulka.bs.jooq.generated.tables.pojos.Game> fetchById(UUID... values) {
        return fetch(Game.GAME.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.rmulka.bs.jooq.generated.tables.pojos.Game fetchOneById(UUID value) {
        return fetchOne(Game.GAME.ID, value);
    }

    /**
     * Fetch records that have <code>in_progress BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.rmulka.bs.jooq.generated.tables.pojos.Game> fetchRangeOfInProgress(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Game.GAME.IN_PROGRESS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>in_progress IN (values)</code>
     */
    public List<com.rmulka.bs.jooq.generated.tables.pojos.Game> fetchByInProgress(Boolean... values) {
        return fetch(Game.GAME.IN_PROGRESS, values);
    }

    /**
     * Fetch records that have <code>details BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.rmulka.bs.jooq.generated.tables.pojos.Game> fetchRangeOfDetails(JSONB lowerInclusive, JSONB upperInclusive) {
        return fetchRange(Game.GAME.DETAILS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>details IN (values)</code>
     */
    public List<com.rmulka.bs.jooq.generated.tables.pojos.Game> fetchByDetails(JSONB... values) {
        return fetch(Game.GAME.DETAILS, values);
    }

    /**
     * Fetch records that have <code>num_players BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.rmulka.bs.jooq.generated.tables.pojos.Game> fetchRangeOfNumPlayers(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Game.GAME.NUM_PLAYERS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>num_players IN (values)</code>
     */
    public List<com.rmulka.bs.jooq.generated.tables.pojos.Game> fetchByNumPlayers(Integer... values) {
        return fetch(Game.GAME.NUM_PLAYERS, values);
    }
}
